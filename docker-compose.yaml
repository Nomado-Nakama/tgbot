services:
  db:
    image: postgres:16-alpine
    ports: ["9441:5432"]
    environment:
      POSTGRES_DB:   ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes: [db-data:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [bot-net]

  migrator:
    build:
      context: .
      target: base
      args:
        # build-time flag â†’ lets Dockerfile skip heavy deps
        ENABLE_VECTOR: ${ENABLE_VECTOR:-0}
    command: ["uv", "run", "alembic", "upgrade", "head"]
    env_file: ./.env
    depends_on:
      db: { condition: service_healthy }
    networks: [bot-net]

  bot:
    build:
      context: .
      args:
        # build-time flag again, for the final image
        ENABLE_VECTOR: ${ENABLE_VECTOR:-0}
    env_file: ./.env
    environment:
      # runtime flag so your code can gate RAG calls
      ENABLE_VECTOR_SEARCH: ${ENABLE_VECTOR:-0}
    depends_on:
      db:       { condition: service_healthy }
      migrator: { condition: service_completed_successfully }
    restart: unless-stopped
    ports: ["${WEBAPP_PORT}:${WEBAPP_PORT}"]
    networks: [bot-net]

volumes:
  db-data:

networks:
  bot-net:
    external: false
